Plan for the programming project report

Abstract

Introduction
	Idea of tracking time symmetrically, with annotations in first and last frame
	Mention that we have two main strategies

Related work
	1. OptNet, where quadratic programs are considered
	2. Sinkhorn distances

Tracking as min cost flow problem
	Structure of Graph
	Costs produced by NN
	Flow indicates postion of object

Differentiating through a linear program
	KKT Konditions, adaptation of OptNet approach for linear program
	Theoretical issues: 
		matrix that has to be inverted (or at least should have a solution) does not have full rank (since Q is not positive definite and A does not have full row rank), compare Theorem 1 of OptNet
		 --> just look for any Least Squares Solution, but if there are many different solutions, subsequent interations might not go in the same direction
		feasable set of linear program is polyhedron. therefore, the function cost --> solution is very jumpy and hard to differentiate
		---> Maybe add very small quadratic term. This might also help with the uniquess of a solution above. Not yet explored.
		---> Maybe add regularisation term to make boundaries of feasable set smooth. Not yet explored
		---> Capacities could also be computed by NN. Differentiating by capacities would me easier that by costs. 

	Practical issues:
		huge problem size: OptNet states that more than a few hundred parameter are infeasable. We have ~ window sizeÂ² * width* height * num_frames many, so even for shrunk and cropped video way to many.
		---> working with sparse matrices would improve performance. Not yet explored
		QP Solver from OptNet authors does not work


Using shortest paths
	Simplification of the problem to shortest paths (ie no capacities), since there are fast solvers for shortest paths problem
	Instead of differentiating through linear program, good paths are rewarded, bad ones penalised. Should implement uniform penalties. Also, update along all paths, not just those starting in the BB
	Issue: Mutual beginning of good and bad path does not get updated since rewards and penalties cancel.
	Use difference between old and updated costs as loss for NN.
	
Implementation:
	for graphs: graph_tool for fast handeling of graphs
	variant of U-Net (after SUperHuman...) for NN

Datasets
	VOT, VOT GT
	Cropped and shrunk
	Ball1 
	Processor


